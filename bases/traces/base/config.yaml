---
exporters:
  logging:
    loglevel: "${OTEL_LOG_LEVEL}"
  otlphttp:
    endpoint: "${OBSERVE_COLLECTOR_SCHEME}://${OBSERVE_CUSTOMER}.${OBSERVE_COLLECTOR_HOST}:${OBSERVE_COLLECTOR_PORT}/${OBSERVE_COLLECTOR_OTEL_VERSION}/otel"
    headers:
      authorization: "Bearer ${OBSERVE_TOKEN}"
    sending_queue:
      num_consumers: ${OTEL_SENDING_QUEUE}
      queue_size: ${OTEL_QUEUE_SIZE}
    retry_on_failure:
      enabled: ${OTEL_RETRY_ON_FAILURE}
extensions:
  health_check: {}
  zpages: {}
processors:
  probabilistic_sampler:
    hash_seed: ${OTEL_SAMPLER_HASH_SEED}
    sampling_percentage: ${OTEL_SAMPLER_PERCENTAGE}
  k8sattributes:
    auth_type: serviceAccount
    passthrough: false
    extract:
      metadata:
        - k8s.pod.name
        - k8s.namespace.name
        - k8s.cluster.uid
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: connection
  batch:
  memory_limiter:
    limit_mib: ${OTEL_MEMORY_LIMITER_LIMIT_MIB}
    spike_limit_mib: ${OTEL_MEMORY_LIMITER_SPIKE_LIMIT_MIB}
    limit_percentage: ${OTEL_MEMORY_LIMITER_LIMIT_PERCENTAGE}
    spike_limit_percentage: ${OTEL_MEMORY_LIMITER_SPIKE_LIMIT_PERCENTAGE}
    check_interval: "${OTEL_MEMORY_LIMITER_CHECK_INTERVAL}"
receivers:
  zipkin:
  otlp:
    protocols:
      grpc:
      http:
service:
  telemetry:
    logs:
      level: "${OTEL_LOG_LEVEL}"
  extensions: [health_check, zpages]
  pipelines:
    traces:
      receivers: [otlp, zipkin]
      processors: [probabilistic_sampler, k8sattributes, memory_limiter, batch]
      exporters: [otlphttp, logging]
    metrics:
      receivers: [otlp]
      processors: [k8sattributes, memory_limiter, batch]
      exporters: [otlphttp, logging]
    logs:
      receivers: [otlp]
      processors: [k8sattributes, memory_limiter, batch]
      exporters: [otlphttp, logging]
