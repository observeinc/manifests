---
server:
  log_level: ${PROM_LOG_LEVEL}

metrics:
  wal_directory: /tmp/grafana-agent-wal
  global:
    scrape_interval: ${PROM_SCRAPE_INTERVAL}
    scrape_timeout: ${PROM_SCRAPE_TIMEOUT}
    external_labels:
      clusterUid: ${OBSERVE_CLUSTER}
  configs:
    - name: integrations
      host_filter: ${PROM_HOST_FILTER}
      min_wal_time: ${PROM_MIN_WAL_TIME}
      max_wal_time: ${PROM_MAX_WAL_TIME}
      wal_truncate_frequency: ${PROM_WAL_TRUNCATE_FREQUENCY}
      remote_flush_deadline: ${PROM_REMOTE_FLUSH_DEADLINE}
      remote_write:
        - url: ${OBSERVE_COLLECTOR_SCHEME}://${OBSERVE_CUSTOMER}.${OBSERVE_COLLECTOR_HOST}:${OBSERVE_COLLECTOR_PORT}/v1/prometheus
          authorization:
            credentials: ${OBSERVE_TOKEN}
          remote_timeout: ${PROM_REMOTE_TIMEOUT}
          queue_config:
            batch_send_deadline: ${PROM_BATCH_SEND_DEADLINE}
            min_backoff: ${PROM_MIN_BACKOFF}
            max_backoff: ${PROM_MAX_BACKOFF}
            max_shards: ${PROM_MAX_SHARDS}
            max_samples_per_send: ${PROM_MAX_SAMPLES_PER_SEND}
            capacity: ${PROM_CAPACITY}
          tls_config:
            insecure_skip_verify: ${OBSERVE_COLLECTOR_INSECURE}

      scrape_configs:
        - job_name: "integrations/kubernetes/pods"
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          sample_limit: ${PROM_SCRAPE_SAMPLE_LIMIT}
          body_size_limit: ${PROM_SCRAPE_BODY_SIZE_LIMIT}
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - action: ${PROM_SCRAPE_POD_ACTION}
            # Drop anything matching the configured namespace.
            - action: 'drop'
              source_labels: ['__meta_kubernetes_namespace']
              regex: ${PROM_SCRAPE_POD_NAMESPACE_DROP_REGEX}
            # Drop anything not matching the configured namespace.
            - action: 'keep'
              source_labels: ['__meta_kubernetes_namespace']
              regex: ${PROM_SCRAPE_POD_NAMESPACE_KEEP_REGEX}
            # Drop endpoints without one of: a port name suffixed with the configured regex, or an explicit prometheus port annotation.
            - action: 'keep'
              source_labels: ['__meta_kubernetes_pod_container_port_name', '__meta_kubernetes_pod_annotation_prometheus_io_port']
              regex: '(${PROM_SCRAPE_POD_PORT_KEEP_REGEX};|.*;\d+)'
            # Drop pods without a name label.
            # - action: 'drop'
            #   regex: ''
            #   source_labels: ['__meta_kubernetes_pod_label_name']
            # Drop pods with phase Succeeded or Failed.
            - action: 'drop'
              regex: 'Succeeded|Failed'
              source_labels: ['__meta_kubernetes_pod_phase']
            # Drop anything annotated with 'prometheus.io.scrape=false'.
            - action: 'drop'
              regex: 'false'
              source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scrape']
            # Drop anything annotated with 'observeinc.com.scrape=false'.
            - action: 'drop'
              regex: 'false'
              source_labels: ['__meta_kubernetes_pod_annotation_observeinc_com_scrape']
            # Allow pods to override the scrape scheme with 'prometheus.io.scheme=https'.
            - action: 'replace'
              regex: '(https?)'
              replacement: '$1'
              source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_scheme']
              target_label: '__scheme__'
            # Allow service to override the scrape path with 'prometheus.io.path=/other_metrics_path'.
            - action: 'replace'
              regex: '(.+)'
              replacement: '$1'
              source_labels: ['__meta_kubernetes_pod_annotation_prometheus_io_path']
              target_label: '__metrics_path__'
            # Allow services to override the scrape port with 'prometheus.io.port=1234'.
            - action: 'replace'
              regex: '(.+?)(\:\d+)?;(\d+)'
              replacement: '$1:$3'
              source_labels: ['__address__', '__meta_kubernetes_pod_annotation_prometheus_io_port']
              target_label: '__address__'
            # Map all K8s labels/annotations starting with
            # 'prometheus.io/param-' to URL params for Prometheus scraping.
            - action: 'labelmap'
              regex: '__meta_kubernetes_pod_annotation_prometheus_io_param_(.+)'
              replacement: '__param_$1'
            # Map all K8s labels/annotations starting with
            # 'prometheus.io/label-' to Prometheus labels.
            - action: 'labelmap'
              regex: '__meta_kubernetes_pod_label_prometheus_io_label_(.+)'
            - action: 'labelmap'
              regex: '__meta_kubernetes_pod_annotation_prometheus_io_label_(.+)'
            # Rename jobs to be <namespace>/<name, from pod name label>.
            # - action: 'replace'
            #   separator: '/'
            #   source_labels: ['__meta_kubernetes_namespace', '__meta_kubernetes_pod_label_name']
            #   target_label: 'job'
            #   replacement: '$1'
            # But also include the namespace, container, pod as separate labels,
            # for routing alerts and joining with cAdvisor metrics.
            - action: 'replace'
              source_labels: ['__meta_kubernetes_namespace']
              target_label: 'namespace'
            - action: 'replace'
              source_labels: ['__meta_kubernetes_pod_name']
              # Not 'pod_name', which disappeared in K8s 1.16.
              target_label: 'pod'
            - action: 'replace'
              source_labels: ['__meta_kubernetes_pod_container_name']
              # Not 'container_name', which disappeared in K8s 1.16.
              target_label: 'container'
            - action: 'replace'
              source_labels: ['__meta_kubernetes_pod_node_name']
              target_label: 'node'
          metric_relabel_configs:
            - action: drop
              regex: ${PROM_SCRAPE_POD_METRIC_DROP_REGEX}
              source_labels:
                - __name__
            - action: keep
              regex: ${PROM_SCRAPE_POD_METRIC_KEEP_REGEX}
              source_labels:
                - __name__
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: false
            server_name: kubernetes

        - job_name: "integrations/kubernetes/kubelet"
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          sample_limit: ${PROM_SCRAPE_SAMPLE_LIMIT}
          body_size_limit: ${PROM_SCRAPE_BODY_SIZE_LIMIT}
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: ${PROM_SCRAPE_KUBELET_ACTION}
            - replacement: kubernetes.default.svc:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$1/proxy/metrics
              source_labels:
                - __meta_kubernetes_node_name
              target_label: __metrics_path__
          metric_relabel_configs:
            - action: drop
              regex: ${PROM_SCRAPE_KUBELET_METRIC_DROP_REGEX}
              source_labels:
                - __name__
            - action: keep
              regex: ${PROM_SCRAPE_KUBELET_METRIC_KEEP_REGEX}
              source_labels:
                - __name__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: false
            server_name: kubernetes

        - job_name: "integrations/kubernetes/resource"
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          sample_limit: ${PROM_SCRAPE_SAMPLE_LIMIT}
          body_size_limit: ${PROM_SCRAPE_BODY_SIZE_LIMIT}
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: ${PROM_SCRAPE_RESOURCE_ACTION}
            - replacement: kubernetes.default.svc:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$1/proxy/metrics/resource
              source_labels:
                - __meta_kubernetes_node_name
              target_label: __metrics_path__
          metric_relabel_configs:
            - action: drop
              regex: ${PROM_SCRAPE_RESOURCE_METRIC_DROP_REGEX}
              source_labels:
                - __name__
            - action: keep
              regex: ${PROM_SCRAPE_RESOURCE_METRIC_KEEP_REGEX}
              source_labels:
                - __name__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: false
            server_name: kubernetes

        - job_name: "integrations/kubernetes/cadvisor"
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          sample_limit: ${PROM_SCRAPE_SAMPLE_LIMIT}
          body_size_limit: ${PROM_SCRAPE_BODY_SIZE_LIMIT}
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: ${PROM_SCRAPE_CADVISOR_ACTION}
            - replacement: kubernetes.default.svc:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
              source_labels:
                - __meta_kubernetes_node_name
              target_label: __metrics_path__
          metric_relabel_configs:
            # drop "pod" level aggregates, identified by absence of image
            - action: drop
              regex: container_([a-z_]+);
              source_labels:
                - __name__
                - image
            - action: drop
              regex: ${PROM_SCRAPE_CADVISOR_METRIC_DROP_REGEX}
              source_labels:
                - __name__
            - action: keep
              regex: ${PROM_SCRAPE_CADVISOR_METRIC_KEEP_REGEX}
              source_labels:
                - __name__
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: false
            server_name: kubernetes
