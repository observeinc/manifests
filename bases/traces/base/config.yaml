---
exporters:
  debug: {}
  otlphttp:
    endpoint: "${OBSERVE_COLLECTOR_SCHEME}://${OBSERVE_CUSTOMER}.${OBSERVE_COLLECTOR_HOST}:${OBSERVE_COLLECTOR_PORT}/${OBSERVE_COLLECTOR_OTEL_VERSION}/otel"
    headers:
      authorization: "Bearer ${OBSERVE_TOKEN}"
    sending_queue:
      num_consumers: ${OTEL_SENDING_QUEUE}
      queue_size: ${OTEL_QUEUE_SIZE}
    retry_on_failure:
      enabled: ${OTEL_RETRY_ON_FAILURE}
extensions:
  health_check: {}
  zpages: {}
processors:
  probabilistic_sampler:
    hash_seed: ${OTEL_SAMPLER_HASH_SEED}
    sampling_percentage: ${OTEL_SAMPLER_PERCENTAGE}
  k8sattributes:
    auth_type: serviceAccount
    passthrough: false
    extract:
      metadata:
        - k8s.pod.name
        - k8s.namespace.name
        - k8s.cluster.uid
      labels:
        - tag_name: fallback.service.version
          key_regex: ${OTEL_SERVICE_VERSION_LABEL_KEY_REGEX}
        - tag_name: $$1
          key_regex: opentelemetry.observeinc.com/(.*)
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: connection
  resource:
    attributes:
      - key: service.version
        from_attribute: fallback.service.version
        action: insert
      - key: fallback.service.version
        action: delete
      - key: k8s.cluster.uid
        value: ${OBSERVE_CLUSTER}
        action: ${OTEL_OBSERVE_CLUSTER_ACTION}
  batch:
    send_batch_max_size: ${OTEL_SEND_BATCH_MAX_SIZE}
  memory_limiter:
    limit_mib: ${OTEL_MEMORY_LIMITER_LIMIT_MIB}
    spike_limit_mib: ${OTEL_MEMORY_LIMITER_SPIKE_LIMIT_MIB}
    limit_percentage: ${OTEL_MEMORY_LIMITER_LIMIT_PERCENTAGE}
    spike_limit_percentage: ${OTEL_MEMORY_LIMITER_SPIKE_LIMIT_PERCENTAGE}
    check_interval: "${OTEL_MEMORY_LIMITER_CHECK_INTERVAL}"
  # truncate individual strings under certain keys to try to avoid hitting the record size limit at observe collector
  transform/truncate:
    trace_statements:
      - context: span
        statements:
          - truncate_all(attributes, ${OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT})
          - truncate_all(resource.attributes, ${OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT})
      - context: spanevent
        statements:
          - truncate_all(attributes, ${OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT})
          - truncate_all(resource.attributes, ${OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT})
receivers:
  zipkin:
  otlp:
    protocols:
      grpc:
      http:
service:
  telemetry:
    logs:
      level: "info"
  extensions: [health_check, zpages]
  pipelines:
    traces:
      receivers: [otlp, zipkin]
      processors: [probabilistic_sampler, transform/truncate, k8sattributes, resource, memory_limiter, batch]
      exporters: [otlphttp, debug]
    metrics:
      receivers: [otlp]
      processors: [k8sattributes, resource, memory_limiter, batch]
      exporters: [otlphttp, debug]
    logs:
      receivers: [otlp]
      processors: [k8sattributes, resource, memory_limiter, batch]
      exporters: [otlphttp, debug]
