apiVersion: v1
kind: Namespace
metadata:
  name: observe
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent
  namespace: observe
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: observe-state
  namespace: observe
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: observe-state
  namespace: observe
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: observe-state
rules:
- apiGroups:
  - ""
  resources:
  - '*'
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - apps
  resources:
  - '*'
  verbs:
  - list
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: observe-state
  namespace: observe
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: observe-state
subjects:
- kind: ServiceAccount
  name: observe-state
  namespace: observe
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
- kind: ServiceAccount
  name: grafana-agent
  namespace: observe
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: observe-state
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: observe-state
subjects:
- kind: ServiceAccount
  name: observe-state
  namespace: observe
---
apiVersion: v1
data:
  agent.yaml: |
    server:
      http_listen_port: 12345
    prometheus:
      wal_directory: /tmp/grafana-agent-wal
      global:
        scrape_interval: 15s
        external_labels:
          clusterUid: ${OBSERVE_CLUSTER}
      configs:
      - name: integrations
        remote_write:
        - url: https://collect.observeinc.com/v1/prometheus
          basic_auth:
            username: ${OBSERVE_CUSTOMER}
            password: ${OBSERVE_TOKEN}
        scrape_configs:
        - job_name: pods
          kubernetes_sd_configs:
          - role: pod
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            api_server: https://kubernetes.default.svc
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          relabel_configs:
          - action: keep
            regex: true
            source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
          - action: replace
            regex: (.+)
            source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
            target_label: __address__
          - action: replace
            source_labels: [ __meta_kubernetes_namespace ]
            target_label: kubernetes_namespace
          - action: replace
            source_labels: [ __meta_kubernetes_pod_name ]
            target_label: kubernetes_pod_name
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: labelmap
            regex: __meta_kubernetes_annotations_label_(.+)
kind: ConfigMap
metadata:
  name: grafana-agent-4df5t5gc69
  namespace: observe
---
apiVersion: v1
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush          1
        Grace          10
        Daemon         Off
        Log_Level      warning
        Parsers_File   parsers.conf
        HTTP_Server    On
        HTTP_Listen    0.0.0.0
        HTTP_PORT      2020

    [INPUT]
        Name           tail
        Tag            k8slogs
        Path           /var/log/containers/*.log
        Path_Key       filename
        DB             /var/log/flb_kube_${NAMESPACE}.db
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        Read_From_Head    True
        Buffer_Chunk_Size 32k
        Buffer_Max_Size   256k
        Rotate_Wait       5
        Refresh_Interval  2
        Docker_Mode       On
        Docker_Mode_Flush 4

    [INPUT]
        Name           tail
        Tag            k8snode
        Path           /var/log/*.log,/var/log/syslog
        Exclude_Path   /var/log/kube-apiserver-audit-*.log
        Path_Key       filename
        DB             /var/log/flb_node_${NAMESPACE}.db
        Ignore_Older      1d
        Skip_Long_Lines   On
        Mem_Buf_Limit     10MB
        Buffer_Chunk_Size 1024k
        Buffer_Max_Size   4096k
        Rotate_Wait       5

    [INPUT]
        Name           tail
        Tag            k8saudit
        Path           /var/log/kube-apiserver-audit.log
        Path_Key       filename
        DB             /var/log/flb_audit_${NAMESPACE}.db
        Mem_Buf_Limit     10MB
        Buffer_Chunk_Size 1024k
        Buffer_Max_Size   4096k
        Rotate_Wait       5

    [FILTER]
        Name            record_modifier
        Match           *
        Record          nodeName ${NODE}

    [FILTER]
        Name            parser
        Alias           parse_filename
        Match           k8slogs
        Key_Name        filename
        Reserve_Data    True
        Parser          kube-custom


    [FILTER]
        Name            record_modifier
        Alias           filter_docker
        Match           k8slogs
        Whitelist_key   log
        Whitelist_key   containerId
        Whitelist_key   containerName
        Whitelist_key   podName
        Whitelist_key   nodeName
        Whitelist_key   namespace

    [OUTPUT]
        Name            http
        Match           k8slogs
        Host            collect.observeinc.com
        Port            443
        TLS             on
        URI             /v1/http/kubernetes/logs?clusterUid=${OBSERVE_CLUSTER}
        Format          msgpack
        Header          X-Observe-Decoder fluent
        HTTP_User       ${OBSERVE_CUSTOMER}
        HTTP_Passwd     ${OBSERVE_TOKEN}
        Compress        gzip
  parsers.conf: |
    [PARSER]
        Name        kube-custom
        Format      regex
        Regex       (?<podName>[a-z0-9](?:[-a-z0-9]*[a-z0-9])?(?:\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace>[^_]+)_(?<containerName>.+)-(?<containerId>[a-f0-9]{64})\.log$
  telegraf.conf: |
    [agent]
      omit_hostname = true
      debug = false
      interval = "10s"
      flush_interval = "10s"
      metric_batch_size = 1000
      metric_buffer_limit = 10000
    [[outputs.health]]
      service_address = "http://:8888"
    [[outputs.http]]
      url = "https://collect.observeinc.com/v1/http/kubernetes/telegraf?clusterUid=${OBSERVE_CLUSTER}"
      username = "${OBSERVE_CUSTOMER}"
      password = "${OBSERVE_TOKEN}"
      data_format = "json"
      content_encoding = "gzip"
      [outputs.http.headers]
        Content-Type = "application/json"
        X-Observe-Decoder = "nested"
    [[inputs.kubernetes]]
      url = "https://kubernetes.default.svc/api/v1/nodes/${NODE}/proxy"
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_ca = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
kind: ConfigMap
metadata:
  name: observe-agent-config-57fmm954tg
  namespace: observe
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-agent
  namespace: observe
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: grafana-agent
  template:
    metadata:
      labels:
        name: grafana-agent
    spec:
      containers:
      - args:
        - -config.file=/etc/agent/agent.yaml
        - -config.expand-env
        command:
        - /bin/agent
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: OBSERVE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: credentials
        - name: OBSERVE_CUSTOMER
          valueFrom:
            secretKeyRef:
              key: customer
              name: credentials
        - name: OBSERVE_CLUSTER
          valueFrom:
            configMapKeyRef:
              key: id
              name: cluster-info
        image: grafana/agent:v0.20.0
        imagePullPolicy: IfNotPresent
        name: agent
        ports:
        - containerPort: 12345
          name: http-metrics
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /etc/agent
          name: grafana-agent
      serviceAccount: grafana-agent
      volumes:
      - configMap:
          name: grafana-agent-4df5t5gc69
        name: grafana-agent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: observe-state
  namespace: observe
spec:
  selector:
    matchLabels:
      name: observe-state
  template:
    metadata:
      annotations:
        observeinc.com/nonce: "2019-11-19T00:00:00Z"
      labels:
        name: observe-state
    spec:
      containers:
      - args:
        - --publish-cluster-info=$(POD_NAMESPACE)/cluster-info
        - --max-event-size=128
        - --healthz-bind-address=:5171
        - --include-resources=v1/
        - --include-resources=*
        env:
        - name: NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: observeinc/kubelog:latest
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /healthz
            port: 5171
          timeoutSeconds: 5
        name: kubelog
        ports:
        - containerPort: 5171
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5171
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        securityContext:
          capabilities:
            drop:
            - all
          runAsNonRoot: true
          runAsUser: 65534
      serviceAccountName: observe-state
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: observe-agent
  namespace: observe
spec:
  selector:
    matchLabels:
      name: observe-agent
  template:
    metadata:
      annotations:
        prometheus.io/path: /api/v1/metrics/prometheus
        prometheus.io/port: "2020"
        prometheus.io/scrape: "true"
      labels:
        name: observe-agent
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: observeinc.com/unschedulable
                operator: DoesNotExist
      containers:
      - env:
        - name: NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OBSERVE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: credentials
        - name: OBSERVE_CUSTOMER
          valueFrom:
            secretKeyRef:
              key: customer
              name: credentials
        - name: OBSERVE_CLUSTER
          valueFrom:
            configMapKeyRef:
              key: id
              name: cluster-info
        image: observeinc/telegraf:1.17
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /
            port: 8888
          timeoutSeconds: 5
        name: telegraf
        readinessProbe:
          httpGet:
            path: /
            port: 8888
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/telegraf
          name: config
      - command:
        - /fluent-bit/bin/fluent-bit
        - -c
        - /fluent-bit/etc/fluent-bit.conf
        env:
        - name: NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OBSERVE_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: credentials
        - name: OBSERVE_CUSTOMER
          valueFrom:
            secretKeyRef:
              key: customer
              name: credentials
        - name: OBSERVE_CLUSTER
          valueFrom:
            configMapKeyRef:
              key: id
              name: cluster-info
        image: fluent/fluent-bit:1.8.7
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /
            port: 2020
          timeoutSeconds: 5
        name: fluent-bit
        ports:
        - containerPort: 2020
        readinessProbe:
          httpGet:
            path: /api/v1/metrics/prometheus
            port: 2020
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - mountPath: /fluent-bit/etc
          name: config
        - mountPath: /var/log
          name: varlog
        - mountPath: /var/lib/docker/containers
          name: varlibdockercontainers
          readOnly: true
      terminationGracePeriodSeconds: 15
      tolerations:
      - operator: Exists
      volumes:
      - name: config
        projected:
          sources:
          - configMap:
              name: observe-agent-config-57fmm954tg
          - configMap:
              name: observe-agent-overrides
              optional: true
      - hostPath:
          path: /var/log
        name: varlog
      - hostPath:
          path: /var/lib/docker/containers
        name: varlibdockercontainers
  updateStrategy:
    type: RollingUpdate
